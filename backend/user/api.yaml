openapi: 3.0.0
info:
  title: User service API
  description: API description in Markdown.
  version: 1.0.0

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registration'
      security: []
      responses:
        '200':
          description: OK
        #4xx type errors, TODO: specify exact error codes
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /auth:
    post:
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentication'
      security: []
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: access_token_cookie=eyJ0eXAi...; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'

        #4xx type errors, TODO: specify exact error codes
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /logout:
    post:
      summary: Logout current user
      security:
        - cookieJWTAuth: []
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: access_token_cookie=deleted; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT
  /reset:
    post:
      summary: Reset password for current user
      parameters:
        - in: header
          name: X-CSRF-TOKEN
          schema:
            type: string
          required: true
      security:
        - cookieJWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/resetPassword'
      responses:
        '200':
          description: OK
  /user:
    get:
      summary: Get common info for current user
      security:
        - cookieJWTAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonUserInfo'
  /user/by-id/{id}:
    get:
      summary: Get common info for a different user
      description: Get info about any user by its id, only for admins and creators
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonUserInfo'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/by-name/{name}:
    get:
      summary: Get common info for a different user
      description: Get info about any user by its username, only for admins and creators
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Username of the user
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonUserInfo'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/by-role/{role}:
    get:
      summary: Get common info for different users
      description: Get info about any user by its role, only for admins and creators
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Role of the user
          name: name
          required: true
          schema:
            $ref: '#/components/schemas/roleType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/by-type/{type}:
    get:
      summary: Get common info for different users
      description: Get info about any user by its type, only for admins and creators
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Type of the user
          name: type
          required: true
          schema:
            $ref: '#/components/schemas/userType'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/all:
    get:
      summary: Get common info for all users
      description: Get info about all users, only for admins and creators
      security:
        - cookieJWTAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /role:
    get:
      summary: Get the role of the current user
      security:
        - cookieJWTAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userRole'
  /role/{id}:
    get:
      summary: Get the role of another user
      description: Get the role of another user, only for admins and creators
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userRole'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
    post:
      summary: Set the role of any user
      description: Get the role of another user, only for admins
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
        - in: header
          name: X-CSRF-TOKEN
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRole'
      responses:
        200:
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/personal:
    get:
      summary: Get personal info for current user
      security:
        - cookieJWTAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/personalInfo'
  /user/personal/by-id/{id}:
    get:
      summary: Get personal info for a different user
      description: Get personal info about any user by its id, only for admins and creators
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/personalInfo'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /user/university:
    get:
      summary: Get university student info for current user
      security:
        - cookieJWTAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studentInfo'
        404:
          description: User is not a university student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/university/by-id/{id}:
    get:
      summary: Get university student  info for a different user
      description: Get university student info about any user by its id, only for admins and creators
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studentInfo'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found or is not a university student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /info/universities:
    get:
      summary: Get known university list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUniversitiesResponse'
  /info/countries:
    get:
      summary: Get known country list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCountriesResponse'


components:
  securitySchemes:
    cookieJWTAuth:
      description: Authentication with JWT stored in cookies
      type: apiKey
      in: cookie
      name: access_token_cookie
  schemas:
    errorResponse:
      title: 'Error response'
      description: 'Common response with error message'
      required:
        - error_msg
      properties:
        error_msg:
          type: string
    registration:
      title: 'Registration request info'
      required:
        - auth_info
        - personal_info
        - register_type
      properties:
        auth_info:
          $ref: '#/components/schemas/registerAuthInfo'
        personal_info:
          $ref: '#/components/schemas/personalInfo'
        register_type:
          $ref: '#/components/schemas/userType'
        student_info:
          $ref: '#/components/schemas/studentInfo'
        register_confirm:
          $ref: '#/components/schemas/registerConfirm'
    registerAuthInfo:
      title: 'Authentication info'
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    personalInfo:
      title: 'Personal info'
      required:
        - first_name
        - second_name
        - middle_name
        - date_of_birth
      properties:
        first_name:
          type: string
        second_name:
          type: string
        middle_name:
          type: string
        date_of_birth:
          type: string
          format: date
    studentInfo:
      title: 'Student info'
      required:
        - phone_number
        - university
        - grade
        - university_country
        - citizenship
        - region
        - city
      properties:
        phone_number:
          type: string
        university:
          type: string
        grade:
          type: integer
          minimum: 1
          maximum: 5
        university_country:
          type: string
        citizenship:
          type: string
        region:
          type: string
        city:
          type: string
    registerConfirm:
      title: 'Confirm registration info'
      description: 'Used to register with a one-time password'
      required:
        - registration_number
        - one_time_password
      properties:
        registration_number:
          type: string
        one_time_password:
          type: string
          format: password
    authentication:
      title: 'Authentication request info'
      required:
        - auth_credentials
      properties:
        auth_credentials:
          $ref: '#/components/schemas/authCredentials'
    authCredentials:
      title: 'Authentication credentials'
      required:
        - username #Email for external users, username for MEPhI students
        - password
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    authResponse:
      title: 'Authentication response'
      required:
        - csrf_access_token
      properties:
        csrf_access_token:
          title: CSRF token
          type: string
    getUniversitiesResponse:
      title: 'Get university list response'
      required:
        - university_list
      properties:
        university_list:
          type: array
          items:
            type: string
    getCountriesResponse:
      title: 'Get country list response'
      required:
        - country_list
      properties:
        country_list:
          type: array
          items:
            type: string
    resetPassword:
      title: 'Reset password request'
      required:
        - new_password
        - old_password
      properties:
        new_password:
          type: string
          format: password
        old_password:
          type: string
          format: password
    commonUserInfo:
      title: 'Common user info'
      required:
        - id
        - username
        - role
        - type
      properties:
        id:
          type: integer
        username:
          type: string
        role:
          $ref: '#/components/schemas/roleType'
        type:
          $ref: '#/components/schemas/userType'
    roleType:
      title: 'User role'
      type: string
      enum: ['Admin', 'Creator', 'Participant', 'System']
    userType:
      title: 'User type'
      type: string
      enum: [ 'PreUniversity', 'Enrollee', 'School', 'University', 'Internal' ]
    userList:
      title: 'List of users'
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/commonUserInfo'
    userRole:
      title: 'Role of a user'
      required:
        - role
      properties:
        role:
          $ref: '#/components/schemas/roleType'