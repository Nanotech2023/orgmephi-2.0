openapi: 3.0.0
info:
  title: User service API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000

paths:
  /register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registration'
            #Swagger does not generate example for oneOf
            example: '{
                      "auth_info": {
                        "email": "string",
                        "password": "string"
                      },
                      "personal_info": {
                        "first_name": "string",
                        "second_name": "string",
                        "middle_name": "string",
                        "date_of_birth": "2021-07-27"
                      },
                      "register_type": "PreUniversity",
                      "register_confirm": {
                        "registration_number": "string",
                        "one_time_password": "string"
                      }
                    }'
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonUserInfo'
        #4xx type errors, TODO: specify exact error codes
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Email already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /register/internal:
    post:
      summary: Register an internal user
      description: Register an internal user, admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/registerInternalAuthInfo'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonUserInfo'
        #4xx type errors, TODO: specify exact error codes
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /login:
    post:
      summary: Authenticate a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/authentication'
      security: []
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                description: Set both access_token_cookie and refresh_token_cookie
                type: string
                example: access_token_cookie=eyJ0eXAi...; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'

        #4xx type errors, TODO: specify exact error codes
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /refresh:
    post:
      summary: Refresh JWT token for current user
      security:
        - JWTRefreshToken: [ ]
        - CSRFRefreshToken: [ ]
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                description: Set both access_token_cookie and refresh_token_cookie
                type: string
                example: access_token_cookie=eyJ0eXAi...; Path=/; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/authResponse'
  /logout:
    post:
      summary: Logout current user
      security:
        - JWTAcessToken: []
        - CSRFAcessToken: [] #framework limitations
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                description: Set both access_token_cookie and refresh_token_cookie
                type: string
                example: access_token_cookie=deleted; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT
  /user/self/password:
    post:
      summary: Change password for current user
      security:
        - JWTAcessToken: []
        - CSRFAcessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePassword'
      responses:
        '200':
          description: OK
        '400':
          description: Weak password
        '404':
          description: User not found
  /user/{user_id}/password:
    post:
      summary: Change password for another user
      description: Change password for another user, admins only
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/changePasswordAdmin'
      responses:
        '200':
          description: OK
        '404':
          description: User not found
  /user/self:
    get:
      summary: Get common info for current user
      security:
        - JWTAcessToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonUserInfo'
  /user/{user_id}:
    get:
      summary: Get common info for a different user
      description: Get info about any user by its id, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonUserInfo'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/by-group/{group_id}:
    get:
      summary: Get common info for different users
      description: Get info about any user by their group, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: ID of the group
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/all:
    get:
      summary: Get common info for all users
      description: Get info about all users, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userList'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/{user_id}/role:
    put:
      summary: Set the role of any user
      description: Set the role of another user, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userRole'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/{user_id}/type:
    put:
      summary: Set the type of any user
      description: Set the type of another user, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accountType'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: User is missing required info (e.g. university info for a university student)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/self/personal:
    get:
      summary: Get personal info for current user
      security:
        - JWTAcessToken: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/personalInfo'
  /user/{id}/personal:
    get:
      summary: Get personal info for a different user
      description: Get personal info about any user by its id, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/personalInfo'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
    patch:
      summary: Set personal info for a user
      description: Set personal info about any user by its id, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personalInfoUpdate'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/self/university:
    get:
      summary: Get university student info for current user
      security:
        - JWTAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studentInfo'
        '404':
          description: User is not a university student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/{id}/university:
    get:
      summary: Get university student info for a different user
      description: Get university student info about any user by its id, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/studentInfo'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found or is not a university student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
    patch:
      summary: Set university student info for a user
      description: Set university student info about any user by its id, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/studentInfoUpdate'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found or is not a university student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /preregister:
    post:
      summary: Register an unconfirmed user with a one-time password
      description: Register an unconfirmed user with a one-time password, creators and admins only
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerConfirm'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/self/groups:
    get:
      summary: Get groups for current user
      security:
        - JWTAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupList'
  /user/{user_id}/groups:
    get:
      summary: Get groups for a different user
      description: Get group list for any user by its id, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupList'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/{user_id}/groups/add:
    post:
      summary: Assign a user to a group
      description: Assign a user to a group, only for admins and creators
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateGroups'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: User alreadyy in the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/{user_id}/groups/remove:
    post:
      summary: Remove a user from a group
      description: Remove a user from a group, only for admins and creators
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/updateGroups'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /group/all:
    get:
      summary: Get all groups
      description: Get all group list, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupList'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /group/{group_id}:
    get:
      summary: Get any group
      description: Get any group, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the group
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupType'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /group/add:
    post:
      summary: Add a group
      description: Add a group, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addGroup'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groupType'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Group already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /group/{group_id}/delete:
    post:
      summary: Delete a group
      description: Add a group, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: ID of the group
          name: group_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addGroup'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /info/universities:
    get:
      summary: Get known university list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUniversitiesResponse'
  /info/countries:
    get:
      summary: Get known country list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCountriesResponse'


components:
  securitySchemes:
    JWTAcessToken:
      description: Authentication with JWT stored in cookies
      type: apiKey
      in: cookie
      name: access_token_cookie
    JWTRefreshToken:
      description: JWT stored in cookies to refresh an acess token
      type: apiKey
      in: cookie
      name: refresh_token_cookie
    CSRFAcessToken:
      description: CSRF acess token
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
    CSRFRefreshToken:
      description: CSRF refresh token for "remember me" functionality
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
  schemas:
    errorResponse:
      title: 'Error response'
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/errorValue'
    errorValue:
      title: 'Error value'
      required:
        - status
        - title
      properties:
        class:
          type: string
        status:
          type: integer
        title:
          type: string
    registration:
      title: 'Registration request info'
      oneOf:
        - $ref: '#/components/schemas/registrationSchool'
        - $ref: '#/components/schemas/registrationUniversity'
    registrationSchool:
      required:
        - auth_info
        - personal_info
        - register_type
      properties:
        auth_info:
          $ref: '#/components/schemas/registerAuthInfo'
        personal_info:
          $ref: '#/components/schemas/personalInfo'
        register_type:
          $ref: '#/components/schemas/userTypeSchool'
        register_confirm:
          $ref: '#/components/schemas/registerConfirm'
    registrationUniversity:
      required:
        - auth_info
        - personal_info
        - register_type
        - student_info
      properties:
        auth_info:
          $ref: '#/components/schemas/registerAuthInfo'
        personal_info:
          $ref: '#/components/schemas/personalInfo'
        register_type:
          $ref: '#/components/schemas/userTypeUniversity'
        student_info:
          $ref: '#/components/schemas/studentInfo'
    registerAuthInfo:
      title: 'Authentication info'
      required:
        - email
        - password
      properties:
        email:
          type: string
          pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
          maxLength: 64
        password:
          type: string
          format: password
          maxLength: 128
    personalInfo:
      title: 'Personal info'
      required:
        - first_name
        - second_name
        - middle_name
        - date_of_birth
      properties:
        first_name:
          type: string
          maxLength: 40
        second_name:
          type: string
          maxLength: 40
        middle_name:
          type: string
          maxLength: 40
        date_of_birth:
          type: string
          format: date
    registerInternalAuthInfo:
      title: 'Authentication info for internal users'
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    personalInfoUpdate:
      title: 'Update request for personal info'
      description: Set fields that should be changed
      properties:
        first_name:
          type: string
        second_name:
          type: string
        middle_name:
          type: string
        date_of_birth:
          type: string
          format: date
    studentInfo:
      title: 'Student info'
      required:
        - phone_number
        - university
        - grade
        - university_country
        - citizenship
        - region
        - city
      properties:
        phone_number:
          type: string
          pattern: '(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]‌​)\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)([2-9]1[02-9]‌​|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{2})\s*(?:[.-]\s*)?([0-9]{2})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$'
          maxLength: 32
        university:
          type: string
          maxLength: 32
        grade:
          type: integer
          minimum: 1
          maximum: 5
        university_country:
          type: string
          maxLength: 32
        citizenship:
          type: string
          maxLength: 32
        region:
          type: string
          maxLength: 32
        city:
          type: string
          maxLength: 32
    studentInfoUpdate:
      title: 'Update request for student info'
      description: Set fields that should be changed
      properties:
        phone_number:
          type: string
        university:
          type: string
        grade:
          type: integer
          minimum: 1
          maximum: 5
        university_country:
          type: string
        citizenship:
          type: string
        region:
          type: string
        city:
          type: string
    registerConfirm:
      title: 'Confirm registration info'
      description: 'Used to register with a one-time password'
      required:
        - registration_number
        - one_time_password
      properties:
        registration_number:
          type: string
          maxLength: 64
        one_time_password:
          type: string
          format: password
          maxLength: 128
    authentication:
      title: 'Authentication request info'
      required:
        - auth_credentials
        - remember_me
      properties:
        auth_credentials:
          $ref: '#/components/schemas/authCredentials'
        remember_me:
          description: Greatly increases refresh token expiration time
          type: boolean
    authCredentials:
      title: 'Authentication credentials'
      required:
        - username
        - password
      properties:
        username:
          description: Email for external users, username for MEPhI students, number for unconfirmed users
          type: string
          maxLength: 64
        password:
          type: string
          format: password
          maxLength: 128
    authResponse:
      title: 'Authentication response'
      required:
        - csrf_access_token
        - csrf_refresh_token
      properties:
        csrf_access_token:
          title: CSRF token for acess JWT token
          type: string
        csrf_refresh_token:
          title: CSRF token for refresh JWT token
          type: string
    getUniversitiesResponse:
      title: 'Get university list response'
      required:
        - university_list
      properties:
        university_list:
          type: array
          items:
            type: string
    getCountriesResponse:
      title: 'Get country list response'
      required:
        - country_list
      properties:
        country_list:
          type: array
          items:
            type: string
    changePassword:
      title: 'Reset password request'
      required:
        - new_password
        - old_password
      properties:
        new_password:
          type: string
          format: password
          maxLength: 128
        old_password:
          type: string
          format: password
          maxLength: 128
    changePasswordAdmin:
      title: 'Reset password request for admins'
      required:
        - new_password
      properties:
        new_password:
          type: string
          format: password
          maxLength: 128
    commonUserInfo:
      title: 'Common user info'
      required:
        - id
        - username
        - role
        - type
      properties:
        id:
          type: integer
        username:
          type: string
          maxLength: 20
        role:
          $ref: '#/components/schemas/roleType'
        type:
          $ref: '#/components/schemas/userType'
    roleType:
      title: 'User role'
      type: string
      enum: ['Admin', 'Creator', 'Participant', 'System']
    userType:
      title: 'User type'
      type: string
      enum: [ 'PreUniversity', 'Enrollee', 'School', 'University', 'Internal', 'PreRegister' ]
    userTypeSchool:
      title: 'User type'
      type: string
      enum: [ 'PreUniversity', 'Enrollee', 'School' ]
    userTypeUniversity:
      title: 'User type'
      type: string
      enum: [ 'University' ]
    userList:
      title: 'List of users'
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/commonUserInfo'
    userRole:
      title: 'Role of a user'
      required:
        - role
      properties:
        role:
          $ref: '#/components/schemas/roleType'
    accountType:
      title: 'Type of a user'
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/userType'
    groupType:
      title: 'User group'
      required:
        - id
        - name
      properties:
        id:
          type: integer
        name:
          type: string
    groupList:
      title: 'List of user groups'
      required:
        - groups
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/groupType'
    updateGroups:
      title: 'Change groups request'
      required:
        - group_id
      properties:
        group_id:
          type: integer
    addGroup:
      title: 'Add group request'
      required:
        - name
      properties:
        name:
          type: string