openapi: 3.0.0
info:
  title: User service API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
  - url: http://127.0.0.1:5000/user/creator

paths:
  ######################################################################################################################
  ##                                             Path definition                                                      ##
  ######################################################################################################################

  /user/{user_id}:
    get:
      summary: Get common info for a different user
      description: Get info about any user by its id, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUserAdmin'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/all:
    get:
      summary: Get common info for all users
      description: Get info about all users, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUserAll'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /user/by-group/{group_id}:
    get:
      summary: Get common info for different users
      description: Get info about any user by their group, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: ID of the group
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUserByGroup'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /personal/{user_id}:
    get:
      summary: Get personal info for a different user
      description: Get personal info about any user by its id, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responsePersonalAdminGet'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Personal info is not set or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /university/{user_id}:
    get:
      summary: Get university student info for a different user
      description: Get university student info about any user by its id, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUniversityAdminGet'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found or is not a university student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /group/{group_id}:
    get:
      summary: Get any group
      description: Get any group, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the group
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGroup'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /group/all:
    get:
      summary: Get all groups
      description: Get all group list, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGroupAll'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /membership/{user_id}:
    get:
      summary: Get groups for a different user
      description: Get group list for any user by its id, only for admins and creators
      security:
        - JWTAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseUserAdminGroup'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

components:
  securitySchemes:

  ######################################################################################################################
  ##                                             Security components                                                  ##
  ######################################################################################################################
    
    JWTAcessToken:
      description: Authentication with JWT stored in cookies
      type: apiKey
      in: cookie
      name: access_token_cookie
    JWTRefreshToken:
      description: JWT stored in cookies to refresh an acess token
      type: apiKey
      in: cookie
      name: refresh_token_cookie
    CSRFAcessToken:
      description: CSRF acess token
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
    CSRFRefreshToken:
      description: CSRF refresh token for "remember me" functionality
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
  schemas:

  ######################################################################################################################
  ##                                             Error handling                                                       ##
  ######################################################################################################################

    errorResponse:
      title: 'Error response'
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            title: 'Error value'
            required:
              - status
              - title
            properties:
              class:
                type: string
              status:
                type: integer
              title:
                type: string

  ######################################################################################################################
  ##                                             Common data types                                                    ##
  ######################################################################################################################

    typeEmail:
      type: string
      pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
      maxLength: 64
      example: 'example@example.org'
    typePhone:
      type: string
      pattern: '(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]‌​)\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)([2-9]1[02-9]‌​|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{2})\s*(?:[.-]\s*)?([0-9]{2})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$'
      maxLength: 32
      example: 8-800-555-35-35
    typeCommonName:
      type: string
      maxLength: 32
    typeDate:
      type: string
      format: date
    typeIdentifier:
      type: integer
    typeGroupName:
      type: string
      maxLength: 32
    typeUserRole:
      title: 'User role'
      type: string
      enum: [ 'Admin', 'Creator', 'Participant', 'System' ]
    typeUserType:
      title: 'All user type'
      type: string
      enum: [ 'PreUniversity', 'Enrollee', 'School', 'University', 'Internal', 'PreRegister' ]

  ######################################################################################################################
  ##                                             Composite data types                                                 ##
  ######################################################################################################################

    # User data

    typeUserInfo:
      title: 'Common user info'
      properties:
        id:
          $ref: '#/components/schemas/typeIdentifier'
        username:
          $ref: '#/components/schemas/typeCommonName'
        role:
          $ref: '#/components/schemas/typeUserRole'
        type:
          $ref: '#/components/schemas/typeUserType'
    typePersonalInfo:
      title: 'Full personal information'
      properties:
        email:
          $ref: '#/components/schemas/typeEmail'
        first_name:
          $ref: '#/components/schemas/typeCommonName'
        second_name:
          $ref: '#/components/schemas/typeCommonName'
        middle_name:
          $ref: '#/components/schemas/typeCommonName'
        date_of_birth:
          $ref: '#/components/schemas/typeDate'
    typeStudentInfo:
      title: 'Full student info'
      properties:
        phone_number:
          $ref: '#/components/schemas/typePhone'
        university:
          $ref: '#/components/schemas/typeCommonName'
        admission_year:
          $ref: '#/components/schemas/typeDate'
        university_country:
          $ref: '#/components/schemas/typeCommonName'
        citizenship:
          $ref: '#/components/schemas/typeCommonName'
        region:
          $ref: '#/components/schemas/typeCommonName'
        city:
          $ref: '#/components/schemas/typeCommonName'

    # Group data

    typeGroup:
      title: 'User group'
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/typeIdentifier'
        name:
          $ref: '#/components/schemas/typeGroupName'

  ######################################################################################################################
  ##                                             Path schemas                                                         ##
  ######################################################################################################################

    # /user/{user_id}

    responseUserAdmin:
      $ref: '#/components/schemas/typeUserInfo'

    # /user/all

    responseUserAll:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/typeUserInfo'

    # /user/by-group/{group_id}

    responseUserByGroup:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/typeUserInfo'

    # /user/{user_id}/personal

    responsePersonalAdminGet:
      $ref: '#/components/schemas/typePersonalInfo'

    # /user/{user_id}/university

    responseUniversityAdminGet:
      $ref: '#/components/schemas/typeStudentInfo'

    # /group/{group_id}

    responseGroup:
      $ref: '#/components/schemas/typeGroup'

    # /group/all

    responseGroupAll:
      type: object
      required:
        - groups
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/typeGroup'

    # /group/{group_id}/remove

    # /user/{user_id}/groups

    responseUserAdminGroup:
      required:
        - groups
      properties:
        groups:
          type: array
          items:
            $ref: '#/components/schemas/typeGroup'