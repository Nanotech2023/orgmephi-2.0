openapi: 3.0.0
info:
  title: User service API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000
  - url: http://127.0.0.1:5000/user/admin

paths:
  ######################################################################################################################
  ##                                             Path definition                                                      ##
  ######################################################################################################################

  /internal_register:
    post:
      summary: Register an internal user
      description: Register an internal user, admin only
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestRegistrationInternal'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseRegistrationInternal'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Username already in use
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /preregister:
    post:
      summary: Register an unconfirmed user with a one-time password
      description: Register an unconfirmed user with a one-time password, creators and admins only
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responsePreregister'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /password/{user_id}:
    post:
      summary: Change password for another user
      description: Change password for another user, admins only
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestPasswordAdmin'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request or weak password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /role/{user_id}:
    put:
      summary: Set the role of any user
      description: Set the role of another user, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUserRole'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /type/{user_id}:
    put:
      summary: Set the type of any user
      description: Set the type of another user, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUserType'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: User is missing required info (e.g. university info for a university student)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /personal/{user_id}:
    patch:
      summary: Set personal info for a user
      description: Set personal info about any user by its id, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestPersonalAdminPatch'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Personal info is not set and request is not full
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /university/{user_id}:
    patch:
      summary: Set university student info for a user
      description: Set university student info about any user by its id, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUniversityAdminPatch'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User not found or is not a university student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: University info is not set and request is not full
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /add_group:
    post:
      summary: Add a group
      description: Add a group, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestGroupAdd'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseGroupAdd'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Group already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /remove_group/{group_id}:
    post:
      summary: Delete a group
      description: Add a group, only for admins
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: ID of the group
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /add_member/{user_id}:
    post:
      summary: Assign a user to a group
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUserGroupsAdd'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: User already in the group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /remove_member/{user_id}:
    post:
      summary: Remove a user from a group
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the user
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestUserGroupsRemove'
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User or group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'


components:
  securitySchemes:

  ######################################################################################################################
  ##                                             Security components                                                  ##
  ######################################################################################################################
    
    JWTAcessToken:
      description: Authentication with JWT stored in cookies
      type: apiKey
      in: cookie
      name: access_token_cookie
    JWTRefreshToken:
      description: JWT stored in cookies to refresh an acess token
      type: apiKey
      in: cookie
      name: refresh_token_cookie
    CSRFAcessToken:
      description: CSRF acess token
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
    CSRFRefreshToken:
      description: CSRF refresh token for "remember me" functionality
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
  schemas:

  ######################################################################################################################
  ##                                             Error handling                                                       ##
  ######################################################################################################################

    errorResponse:
      title: 'Error response'
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            title: 'Error value'
            required:
              - status
              - title
            properties:
              class:
                type: string
              status:
                type: integer
              title:
                type: string

  ######################################################################################################################
  ##                                             Common data types                                                    ##
  ######################################################################################################################

    typeEmail:
      type: string
      pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
      maxLength: 64
      example: 'example@example.org'
    typePhone:
      type: string
      pattern: '(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]‌​)\s*)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)([2-9]1[02-9]‌​|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{2})\s*(?:[.-]\s*)?([0-9]{2})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$'
      maxLength: 32
      example: 8-800-555-35-35
    typePassword:
      type: string
      format: password
      maxLength: 128
      example: qwertyA*1
    typeUsername:
      type: string
      # Must be equal to or larger than email max length
      maxLength: 64
    typeCommonName:
      type: string
      maxLength: 32
    typeDate:
      type: string
      format: date
    typeIdentifier:
      type: integer
    typeGroupName:
      type: string
      maxLength: 32
    typeUserRole:
      title: 'User role'
      type: string
      enum: [ 'Admin', 'Creator', 'Participant', 'System' ]
    typeUserType:
      title: 'All user type'
      type: string
      enum: [ 'PreUniversity', 'Enrollee', 'School', 'University', 'Internal', 'PreRegister' ]

  ######################################################################################################################
  ##                                             Composite data types                                                 ##
  ######################################################################################################################

    # Registration data

    typePreregisterInfo:
      title: 'Credentials for preregistered users'
      required:
        - registration_number
        - password
      properties:
        registration_number:
          $ref: '#/components/schemas/typeUsername'
        password:
          $ref: '#/components/schemas/typePassword'

    # Authorization data

    typeAuthCredentials:
      title: 'Authentication info'
      required:
        - username
        - password
      properties:
        username:
          $ref: '#/components/schemas/typeUsername'
        password:
          $ref: '#/components/schemas/typePassword'

    # User data

    typeUserInfo:
      title: 'Common user info'
      properties:
        id:
          $ref: '#/components/schemas/typeIdentifier'
        username:
          $ref: '#/components/schemas/typeCommonName'
        role:
          $ref: '#/components/schemas/typeUserRole'
        type:
          $ref: '#/components/schemas/typeUserType'
    typePersonalInfo:
      title: 'Full personal information'
      properties:
        email:
          $ref: '#/components/schemas/typeEmail'
        first_name:
          $ref: '#/components/schemas/typeCommonName'
        second_name:
          $ref: '#/components/schemas/typeCommonName'
        middle_name:
          $ref: '#/components/schemas/typeCommonName'
        date_of_birth:
          $ref: '#/components/schemas/typeDate'
    typeStudentInfo:
      title: 'Full student info'
      properties:
        phone_number:
          $ref: '#/components/schemas/typePhone'
        university:
          $ref: '#/components/schemas/typeCommonName'
        admission_year:
          $ref: '#/components/schemas/typeDate'
        university_country:
          $ref: '#/components/schemas/typeCommonName'
        citizenship:
          $ref: '#/components/schemas/typeCommonName'
        region:
          $ref: '#/components/schemas/typeCommonName'
        city:
          $ref: '#/components/schemas/typeCommonName'

    # Group data

    typeGroup:
      title: 'User group'
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/typeIdentifier'
        name:
          $ref: '#/components/schemas/typeGroupName'

  ######################################################################################################################
  ##                                             Path schemas                                                         ##
  ######################################################################################################################

    # /register/internal

    requestRegistrationInternal:
      $ref: '#/components/schemas/typeAuthCredentials'
    responseRegistrationInternal:
      $ref: '#/components/schemas/typeUserInfo'

    # /preregister

    responsePreregister:
      $ref: '#/components/schemas/typePreregisterInfo'

    # /user/{user_id}/password

    requestPasswordAdmin:
      title: 'Reset password request for admins'
      required:
        - new_password
      properties:
        new_password:
          $ref: '#/components/schemas/typePassword'

    # /user/{user_id}/role

    requestUserRole:
      type: object
      required:
        - role
      properties:
        role:
          $ref: '#/components/schemas/typeUserRole'

    # /user/{user_id}/type

    requestUserType:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/typeUserType'

    # /user/{user_id}/personal

    requestPersonalAdminPatch:
      $ref: '#/components/schemas/typePersonalInfo'

    # /user/{user_id}/university

    requestUniversityAdminPatch:
      $ref: '#/components/schemas/typeStudentInfo'

    # /group/add

    requestGroupAdd:
      required:
        - name
      properties:
        name:
          $ref: '#/components/schemas/typeGroupName'
    responseGroupAdd:
      $ref: '#/components/schemas/typeGroup'

    # /group/{group_id}/remove

    # /user/{user_id}/groups/add

    requestUserGroupsAdd:
      required:
        - group_id
      properties:
        group_id:
          $ref: '#/components/schemas/typeIdentifier'

    # /user/{user_id}/groups/remove

    requestUserGroupsRemove:
      required:
        - group_id
      properties:
        group_id:
          $ref: '#/components/schemas/typeIdentifier'