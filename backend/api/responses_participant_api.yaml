openapi: 3.0.0
info:
  title: Student responses service API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000/contest/responses/participant
  - url: http://127.0.0.1:5000

paths:
  ######################################################################################################################
  ##                                             Path definition                                                      ##
  ######################################################################################################################

  # User answer

  /contest/{contest_id}/task/{task_id}/user/self:
    get:
      summary: Get current user answer for the task
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: contest_id
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the task
          name: task_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  user_answer:
                    type: string    #TODO return FILE
        '404':
          description: User, contest or task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /contest/{contest_id}/task/{task_id}/user/self/{filetype}:
    post:
      summary: Add current user answer for the task
      security:
        - cookieJWTAuth: [ ]
        - CSRFToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: contest_id
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the task
          name: task_id
          required: true
          schema:
            type: integer
        - in: path
          description: Type of file
          name: filetype
          required: true
          schema:
            $ref: '#/components/schemas/typeFiletype'
      requestBody:
        content:
          application/octet-stream:
            schema:
              properties:
                user_answer:
                  $ref: '#/components/schemas/typeUserAnswer'
      responses:
        '200':
          description: OK
        '404':
          description: User, contest or task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /contest/{contest_id}/answer/{answer_id}:
    get:
      summary: Get user's answer by id
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: contest_id
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the answer
          name: answer_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userContestAnswer'
        '403':
          description: Not enough rights for current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User or contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    # User status

  /contest/{contest_id}/user/self/status:
    get:
      summary: Get user's status and mark for reponse
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: contest_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseStatus'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User or contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
    post:
      summary: Set user's status and mark for reponse
      description: Set user's status and mark for reponse, only for inspector
      security:
        - cookieJWTAuth: [ ]
        - CSRFToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: contest_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/responseStatus'
      responses:
        '200':
          description: OK
        '400':
          description: Incorrect mark or status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '403':
          description: Invalid role of current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User or contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
  /contest/{contest_id}/user/self/status/history:
    get:
      summary: Get status history of current user's work
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: contest_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userResponseStatusHistory'
        '403':
          description: Not enough rights for current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: User or contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

    # Appeal

  /contest/{contest_id}/user/self/appeal:
    post:
      summary: Create appeal for current user's response
      security:
        - cookieJWTAuth: [ ]
        - CSRFToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: contest_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/appealMessage'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createAppealInfo'
        '404':
          description: User or contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{contest_id}/appeal/{appeal_id}:
    get:
      summary: Get appeal info
      security:
        - cookieJWTAuth: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: contest_id
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the appeal
          name: appeal_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonAppealInfo'
        '404':
          description: Appeal or contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'


components:
  securitySchemes:

  ######################################################################################################################
  ##                                             Security components                                                  ##
  ######################################################################################################################

    cookieJWTAuth:
      description: Authentication with JWT stored in cookies
      type: apiKey
      in: cookie
      name: access_token_cookie
    CSRFToken:
      description: CSRF token
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
  schemas:

  ######################################################################################################################
  ##                                             Error handling                                                       ##
  ######################################################################################################################

    errorResponse:
      title: 'Error response'
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            title: 'Error value'
            required:
              - status
              - title
            properties:
              class:
                type: string
              status:
                type: integer
              title:
                type: string

  ######################################################################################################################
  ##                                             Common data types                                                    ##
  ######################################################################################################################

    typeCommonName:
      type: string
      maxLength: 32
    typeDateTime:
      type: string
      format: date-time   #TODO example
    typeIdentifier:
      type: integer
    typeMark:
      type: number
      format: float
      minimum: 0
      maximum: 100
      nullable: true
    typeNullableIdentifier:
      type: integer
      nullable: true
    typeStatus:
      type: string
      enum: [ "NotChecked", "Accepted", "Rejected", "Appeal", "Revision" ]
    typeUserAnswer:
      type: string
      # format: binary     # TODO FILE
    typeFiletype:
      type: string
      enum: [ "txt", "pdf", "jpg", "doc", "docx", "png", "gif", "odt" ]
    typeMessage:
      type: string
      maxLength: 4096
    typeNullableMessage:
      type: string
      maxLength: 4096
      nullable: true

  ######################################################################################################################
  ##                                             Composite data types                                                 ##
  ######################################################################################################################



  ######################################################################################################################
  ##                                             Path schemas                                                         ##
  ######################################################################################################################

    statusHistoryItem:
      title: "Item of status history"
      required:
        - status
        - datetime
      properties:
        status:
          $ref: '#/components/schemas/typeCommonName'
        datetime:
          $ref: '#/components/schemas/typeDateTime'
        appeal_id:
          $ref: '#/components/schemas/typeNullableIdentifier'
        mark:
          $ref: '#/components/schemas/typeMark'

    userResponseStatusHistory:
      title: "Status history of user response"
      required:
        - user_id
        - contest_id
        - history
      properties:
        user_id:
          $ref: '#/components/schemas/typeIdentifier'
        contest_id:
          $ref: '#/components/schemas/typeIdentifier'
        history:
          type: array
          items:
            $ref: '#/components/schemas/statusHistoryItem'

    responseStatus:
      title: "User's response status and mark"
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/typeStatus'
        mark:
          $ref: '#/components/schemas/typeMark'

    createAppealInfo:
      title: "Id of created appeal"
      required:
        - appeal_id
      properties:
        appeal_id:
          $ref: '#/components/schemas/typeIdentifier'

    appealMessage:
      title: Appeal message
      required:
        - message
      properties:
        message:
          $ref: '#/components/schemas/typeMessage'

    commonAppealInfo:
      title: "Common appeal info"
      required:
        - appeal_id
        - status_id
        - appeal_status
        - appeal_message
        - appeal_response
      properties:
        appeal_id:
          $ref: '#/components/schemas/typeIdentifier'
        status_id:
          $ref: '#/components/schemas/typeIdentifier'
        appeal_status:
          $ref: '#/components/schemas/typeCommonName'
        appeal_message:
          $ref: '#/components/schemas/typeMessage'
        appeal_response:
          $ref: '#/components/schemas/typeNullableMessage'

    userContestAnswer:
      title: "User's contest answer"
      required:
        - user_answer
        - filetype
      properties:
        user_answer:
          $ref: '#/components/schemas/typeUserAnswer'
        filetype:
          $ref: '#/components/schemas/typeFiletype'
