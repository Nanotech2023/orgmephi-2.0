components:
  schemas:
    CSRFPairUser:
      properties:
        confirmed:
          type: boolean
        csrf_access_token:
          type: string
        csrf_refresh_token:
          type: string
      required:
      - confirmed
      - csrf_access_token
      - csrf_refresh_token
      type: object
    City:
      properties:
        name:
          maxLength: 32
          type: string
        region:
          type: string
      required:
      - name
      - region
      type: object
    Country:
      properties:
        name:
          maxLength: 32
          type: string
      required:
      - name
      type: object
    Document:
      discriminator:
        mapping:
          BirthCertificate: '#/components/schemas/DocumentBirthCertificate'
          ForeignPassport: '#/components/schemas/DocumentForeignPassport'
          OtherDocument: '#/components/schemas/DocumentOther'
          RFInternationalPassport: '#/components/schemas/DocumentRFInternational'
          RFPassport: '#/components/schemas/DocumentRF'
        propertyName: document_type
      oneOf:
      - $ref: '#/components/schemas/DocumentRF'
      - $ref: '#/components/schemas/DocumentRFInternational'
      - $ref: '#/components/schemas/DocumentForeignPassport'
      - $ref: '#/components/schemas/DocumentOther'
      - $ref: '#/components/schemas/DocumentBirthCertificate'
    DocumentBirthCertificate:
      properties:
        document_name:
          maxLength: 32
          readOnly: true
          type: string
        document_type:
          enum:
          - BirthCertificate
          type: string
        issue_date:
          format: date
          type: string
        issuer:
          maxLength: 256
          type: string
        number:
          example: '123456'
          pattern: ^[0-9]{6}$
          type: string
        series:
          example: "III-\u0410\u0418"
          pattern: "^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})-[\u0410\
            -\u042F]{2}$"
          type: string
        user_id:
          readOnly: true
          type: integer
      required:
      - document_type
      type: object
    DocumentForeignPassport:
      properties:
        document_name:
          maxLength: 32
          readOnly: true
          type: string
        document_type:
          enum:
          - ForeignPassport
          type: string
        issue_date:
          format: date
          type: string
        issuer:
          maxLength: 256
          type: string
        number:
          example: '1234567'
          pattern: ^[0-9]{1,32}$
          type: string
        series:
          example: '12'
          pattern: ^[0-9]{1,16}$
          type: string
        user_id:
          readOnly: true
          type: integer
      required:
      - document_type
      type: object
    DocumentOther:
      properties:
        document_name:
          maxLength: 32
          type: string
        document_type:
          enum:
          - OtherDocument
          type: string
        issue_date:
          format: date
          type: string
        issuer:
          maxLength: 256
          type: string
        number:
          example: '1234567'
          pattern: ^[0-9]{1,32}$
          type: string
        series:
          example: '12'
          pattern: ^[0-9]{1,16}$
          type: string
        user_id:
          readOnly: true
          type: integer
      required:
      - document_type
      type: object
    DocumentRF:
      properties:
        code:
          example: 123-456
          pattern: ^[0-9]{3}-[0-9]{3}$
          type: string
        document_name:
          maxLength: 32
          readOnly: true
          type: string
        document_type:
          enum:
          - RFPassport
          type: string
        issue_date:
          format: date
          type: string
        issuer:
          maxLength: 256
          type: string
        number:
          example: '123456'
          pattern: ^[0-9]{6}$
          type: string
        series:
          example: '4520'
          pattern: ^[0-9]{4}$
          type: string
        user_id:
          readOnly: true
          type: integer
      required:
      - document_type
      type: object
    DocumentRFInternational:
      properties:
        document_name:
          maxLength: 32
          readOnly: true
          type: string
        document_type:
          enum:
          - RFInternationalPassport
          type: string
        issue_date:
          format: date
          type: string
        issuer:
          maxLength: 256
          type: string
        number:
          example: '1234567'
          pattern: ^[0-9]{7}$
          type: string
        series:
          example: '12'
          pattern: ^[0-9]{2}$
          type: string
        user_id:
          readOnly: true
          type: integer
      required:
      - document_type
      type: object
    Group:
      properties:
        id:
          readOnly: true
          type: integer
        name:
          maxLength: 32
          type: string
      required:
      - name
      type: object
    GroupAddRequestUser:
      properties:
        name:
          maxLength: 32
          type: string
      required:
      - name
      type: object
    GroupListResponseUser:
      properties:
        groups:
          items:
            $ref: '#/components/schemas/Group'
          type: array
      required:
      - groups
      type: object
    InfoCitiesResponseUser:
      properties:
        city_list:
          items:
            $ref: '#/components/schemas/City'
          type: array
      required:
      - city_list
      type: object
    InfoCountriesResponseUser:
      properties:
        country_list:
          items:
            $ref: '#/components/schemas/Country'
          type: array
      required:
      - country_list
      type: object
    InfoRegionsResponseUser:
      properties:
        region_list:
          items:
            $ref: '#/components/schemas/Region'
          type: array
      required:
      - region_list
      type: object
    InfoUniversitiesResponseUser:
      properties:
        university_list:
          items:
            $ref: '#/components/schemas/University'
          type: array
      required:
      - university_list
      type: object
    Location:
      discriminator:
        mapping:
          Foreign: '#/components/schemas/LocationOther'
          Russian: '#/components/schemas/LocationRussia'
        propertyName: location_type
      oneOf:
      - $ref: '#/components/schemas/LocationRussia'
      - $ref: '#/components/schemas/LocationOther'
    LocationOther:
      properties:
        country:
          type: string
        location:
          maxLength: 256
          type: string
        location_type:
          enum:
          - Foreign
          type: string
        rural:
          type: boolean
      required:
      - country
      type: object
    LocationRussia:
      properties:
        city:
          properties:
            name:
              type: string
            region_name:
              type: string
          required:
          - name
          - region_name
          type: object
        country:
          enum:
          - "\u0420\u043E\u0441\u0441\u0438\u044F"
          maxLength: 32
          type: string
        location_type:
          enum:
          - Russian
          type: string
        rural:
          type: boolean
      required:
      - country
      type: object
    LoginRequestUser:
      properties:
        password:
          example: qwertyA*1
          maxLength: 128
          type: string
        remember_me:
          type: boolean
        username:
          maxLength: 64
          type: string
      required:
      - password
      - remember_me
      - username
      type: object
    MembershipRequestUser:
      properties:
        group_id:
          type: integer
      required:
      - group_id
      type: object
    PasswordRequestUser:
      properties:
        new_password:
          example: qwertyA*1
          maxLength: 128
          type: string
      required:
      - new_password
      type: object
    PreregisterResponseUser:
      properties:
        password:
          example: qwertyA*1
          maxLength: 128
          type: string
        registration_number:
          type: integer
      required:
      - password
      - registration_number
      type: object
    Region:
      properties:
        name:
          maxLength: 32
          type: string
      required:
      - name
      type: object
    RegisterConfirmUser:
      properties:
        password:
          example: qwertyA*1
          maxLength: 128
          type: string
        registration_number:
          type: integer
      required:
      - password
      - registration_number
      type: object
    RegisterInternalRequestUser:
      properties:
        password:
          example: qwertyA*1
          maxLength: 128
          type: string
        username:
          maxLength: 64
          type: string
      required:
      - password
      - username
      type: object
    RegistrationInfoUser:
      properties:
        email:
          format: email
          maxLength: 64
          type: string
        password:
          example: qwertyA*1
          maxLength: 128
          type: string
      required:
      - email
      - password
      type: object
    RegistrationPersonalInfoUser:
      properties:
        date_of_birth:
          format: date
          type: string
        first_name:
          maxLength: 32
          type: string
        middle_name:
          maxLength: 32
          type: string
        second_name:
          maxLength: 32
          type: string
      required:
      - date_of_birth
      - first_name
      - middle_name
      - second_name
      type: object
    RegistrationStudentInfoUser:
      properties:
        dwelling:
          $ref: '#/components/schemas/Location'
        grade:
          maximum: 5
          minimum: 1
          type: integer
        phone:
          example: 8 (800) 555 35 35
          type: string
        university:
          $ref: '#/components/schemas/StudentUniversity'
      required:
      - dwelling
      - grade
      - phone
      - university
      type: object
    ResetPasswordUser:
      properties:
        password:
          example: qwertyA*1
          maxLength: 128
          type: string
      required:
      - password
      type: object
    RoleRequestUser:
      properties:
        role:
          enum:
          - Unconfirmed
          - Participant
          - Creator
          - Admin
          - System
          type: string
      required:
      - role
      type: object
    SchoolInfo:
      properties:
        grade:
          type: integer
        location:
          $ref: '#/components/schemas/Location'
        name:
          maxLength: 128
          type: string
        number:
          type: integer
        school_type:
          enum:
          - School
          - Lyceum
          - Gymnasium
          - EducationCenter
          - NightSchool
          - Technical
          - External
          - Collage
          - ProfTech
          - University
          - Correctional
          - Other
          type: string
        user_id:
          readOnly: true
          type: integer
      type: object
    SchoolRegistrationRequestUser:
      properties:
        auth_info:
          $ref: '#/components/schemas/RegistrationInfoUser'
        captcha:
          maxLength: 32
          type: string
        personal_info:
          $ref: '#/components/schemas/RegistrationPersonalInfoUser'
        register_confirm:
          $ref: '#/components/schemas/RegisterConfirmUser'
        register_type:
          enum:
          - PreUniversity
          - Enrollee
          - School
          type: string
      required:
      - auth_info
      - personal_info
      - register_type
      type: object
    SelfGroupsResponseUser:
      properties:
        groups:
          items:
            $ref: '#/components/schemas/Group'
          type: array
      required:
      - groups
      type: object
    SelfPasswordRequestUser:
      properties:
        new_password:
          example: qwertyA*1
          maxLength: 128
          type: string
        old_password:
          example: qwertyA*1
          maxLength: 128
          type: string
      required:
      - new_password
      - old_password
      type: object
    SelfUnfilledResponse:
      properties:
        unfilled:
          items:
            type: object
          type: array
      type: object
    StudentInfo:
      properties:
        grade:
          type: integer
        university:
          $ref: '#/components/schemas/StudentUniversity'
        user_id:
          readOnly: true
          type: integer
      type: object
    StudentUniversity:
      discriminator:
        mapping:
          Custom: '#/components/schemas/StudentUniversityCustom'
          Known: '#/components/schemas/StudentUniversityKnown'
        propertyName: known_type
      oneOf:
      - $ref: '#/components/schemas/StudentUniversityKnown'
      - $ref: '#/components/schemas/StudentUniversityCustom'
    StudentUniversityCustom:
      properties:
        country:
          type: string
        known_type:
          enum:
          - Known
          - Custom
          readOnly: true
          type: string
        university:
          maxLength: 32
          type: string
      required:
      - country
      - university
      type: object
    StudentUniversityKnown:
      properties:
        country:
          maxLength: 32
          readOnly: true
          type: string
        known_type:
          enum:
          - Known
          - Custom
          readOnly: true
          type: string
        university:
          type: string
      required:
      - university
      type: object
    TypeRequestUser:
      properties:
        type:
          enum:
          - PreUniversity
          - Enrollee
          - School
          - University
          - Internal
          - PreRegister
          type: string
      required:
      - type
      type: object
    University:
      properties:
        country:
          type: string
        name:
          maxLength: 32
          type: string
      required:
      - country
      type: object
    UniversityRegistrationRequestUser:
      properties:
        auth_info:
          $ref: '#/components/schemas/RegistrationInfoUser'
        captcha:
          maxLength: 32
          type: string
        personal_info:
          $ref: '#/components/schemas/RegistrationPersonalInfoUser'
        register_type:
          enum:
          - University
          type: string
        student_info:
          $ref: '#/components/schemas/RegistrationStudentInfoUser'
      required:
      - auth_info
      - personal_info
      - register_type
      - student_info
      type: object
    User:
      properties:
        id:
          readOnly: true
          type: integer
        role:
          enum:
          - Unconfirmed
          - Participant
          - Creator
          - Admin
          - System
          type: string
        type:
          enum:
          - PreUniversity
          - Enrollee
          - School
          - University
          - Internal
          - PreRegister
          type: string
        username:
          maxLength: 32
          type: string
      required:
      - role
      - type
      - username
      type: object
    UserFull:
      properties:
        groups:
          items:
            $ref: '#/components/schemas/Group'
          type: array
        id:
          readOnly: true
          type: integer
        role:
          enum:
          - Unconfirmed
          - Participant
          - Creator
          - Admin
          - System
          type: string
        school_info:
          $ref: '#/components/schemas/SchoolInfo'
        student_info:
          $ref: '#/components/schemas/StudentInfo'
        type:
          enum:
          - PreUniversity
          - Enrollee
          - School
          - University
          - Internal
          - PreRegister
          type: string
        user_info:
          $ref: '#/components/schemas/UserInfo'
        username:
          maxLength: 32
          type: string
      required:
      - role
      - type
      - username
      type: object
    UserFullListResponseUser:
      properties:
        users:
          items:
            $ref: '#/components/schemas/UserFull'
          type: array
      required:
      - users
      type: object
    UserInfo:
      properties:
        date_of_birth:
          format: date
          type: string
        document:
          $ref: '#/components/schemas/Document'
        dwelling:
          $ref: '#/components/schemas/Location'
        email:
          format: email
          maxLength: 64
          type: string
        first_name:
          maxLength: 32
          type: string
        gender:
          enum:
          - Male
          - Female
          type: string
        limitations:
          $ref: '#/components/schemas/UserLimitations'
        middle_name:
          maxLength: 32
          type: string
        phone:
          example: 8 (800) 555 35 35
          type: string
        place_of_birth:
          maxLength: 256
          type: string
        second_name:
          maxLength: 32
          type: string
        user_id:
          readOnly: true
          type: integer
      type: object
    UserLimitations:
      properties:
        hearing:
          nullable: true
          type: boolean
        movement:
          nullable: true
          type: boolean
        sight:
          nullable: true
          type: boolean
        user_id:
          readOnly: true
          type: integer
      required:
      - user_id
      type: object
    UserListResponseUser:
      properties:
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
      required:
      - users
      type: object
  securitySchemes:
    CSRFAccessToken:
      in: header
      name: X-CSRF-TOKEN
      type: apiKey
    CSRFRefreshToken:
      in: header
      name: X-CSRF-TOKEN
      type: apiKey
    JWTAccessToken:
      in: cookie
      name: access_token_cookie
      type: apiKey
    JWTRefreshToken:
      in: cookie
      name: refresh_token_cookie
      type: apiKey
info:
  title: aggregate_user
  version: 1.0.0
openapi: 3.0.2
paths:
  /user/registration/captcha:
    get:
      responses:
        '200':
          content:
            image/png:
              schema:
                format: binary
                type: string
          description: OK
  /user/registration/school:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolRegistrationRequestUser'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          description: Bad request or weak password
        '409':
          description: Username already in use
      summary: Register a new school student
  /user/registration/university:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UniversityRegistrationRequestUser'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          description: Bad request or weak password
        '409':
          description: Username already in use
  /user/registration/resend/{email}:
    post:
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        '204':
          description: OK
        '404':
          description: User not found
        '409':
          description: User is already confirmed
  /user/registration/resend:
    post:
      responses:
        '204':
          description: OK
        '409':
          description: User is already confirmed or is not linked to email
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/registration/confirm/{token}:
    post:
      parameters:
      - description: Email confirmation token
        in: path
        name: token
        required: true
        schema:
          type: string
      responses:
        '204':
          description: OK
        '404':
          description: Wrong token
  /user/registration/forgot/{email}:
    post:
      parameters:
      - description: User's email
        in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        '204':
          description: OK
  /user/registration/recover/{token}:
    post:
      parameters:
      - description: Recovery token
        in: path
        name: token
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordUser'
        required: true
      responses:
        '204':
          description: OK
  /user/registration/info/universities:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoUniversitiesResponseUser'
          description: OK
  /user/registration/info/countries:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoCountriesResponseUser'
          description: OK
  /user/registration/info/regions:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoRegionsResponseUser'
          description: OK
  /user/registration/info/cities/{region}:
    get:
      parameters:
      - description: Region name
        in: path
        name: region
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoCitiesResponseUser'
          description: OK
        '404':
          description: Region not found
  /user/auth/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestUser'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSRFPairUser'
          description: OK
          headers:
            Set-Cookie:
              schema:
                description: Set both access_token_cookie and refresh_token_cookie
                example: access_token_cookie=eyJ0eXAi...; Path=/; HttpOnly
                type: string
        '400':
          description: Bad request
        '401':
          description: Wrong credentials
      security: []
  /user/auth/refresh:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSRFPairUser'
          description: OK
          headers:
            Set-Cookie:
              schema:
                description: Set both access_token_cookie and refresh_token_cookie
                example: access_token_cookie=eyJ0eXAi...; Path=/; HttpOnly
                type: string
        '401':
          description: Password changed since token was issues
      security:
      - JWTRefreshToken: []
      - CSRFRefreshToken: []
  /user/auth/logout:
    post:
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                description: Set both access_token_cookie and refresh_token_cookie
                example: access_token_cookie=deleted; path=/; expires=Thu, 01 Jan
                  1970 00:00:00 GMT
                type: string
        '401':
          description: Password changed since token was issues
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/auth/impersonate/{user_id}:
    post:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSRFPairUser'
          description: OK
          headers:
            Set-Cookie:
              schema:
                description: Set both access_token_cookie and refresh_token_cookie
                example: access_token_cookie=eyJ0eXAi...; Path=/; HttpOnly
                type: string
        '401':
          description: Password changed since token was issues
        '404':
          description: User not found
      security:
      - JWTRefreshToken: []
      - CSRFRefreshToken: []
  /user/auth/unimpersonate:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CSRFPairUser'
          description: OK
          headers:
            Set-Cookie:
              schema:
                description: Set both access_token_cookie and refresh_token_cookie
                example: access_token_cookie=eyJ0eXAi...; Path=/; HttpOnly
                type: string
        '401':
          description: Password changed since token was issues
      security:
      - JWTRefreshToken: []
      - CSRFRefreshToken: []
  /user/profile/user:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
  /user/profile/password:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SelfPasswordRequestUser'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request or weak password
        '401':
          description: Wrong credentials
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/profile/personal:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: OK
        '404':
          description: Personal info is not set or user not found
      security:
      - JWTAccessToken: []
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
        description: Will not set 'email', 'first_name', 'middle_name', 'second_name'
          and 'date_of_birth'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/profile/university:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInfo'
          description: OK
        '404':
          description: User not found or is not a university student
      security:
      - JWTAccessToken: []
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentInfo'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found or is not a university student
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/profile/school:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolInfo'
          description: OK
        '404':
          description: User not found or is not a school student
      security:
      - JWTAccessToken: []
    patch:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolInfo'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found or is not a school student
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/profile/groups:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SelfGroupsResponseUser'
          description: OK
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
  /user/profile/unfilled:
    get:
      responses:
        '200':
          content:
            application/pdf:
              schema:
                $ref: '#/components/schemas/SelfUnfilledResponse'
          description: OK
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
  /user/profile/card:
    get:
      responses:
        '200':
          content:
            application/pdf:
              schema:
                format: binary
                type: string
          description: OK
        '404':
          description: User not found
        '409':
          description: User is not a school student or has missing data
      security:
      - JWTAccessToken: []
  /user/profile/photo:
    put:
      requestBody:
        content:
          image/*:
            schema:
              format: binary
              type: string
        required: true
      responses:
        '204':
          description: OK
        '409':
          description: File is too big
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
    get:
      responses:
        '200':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: OK
        '404':
          description: User not found
        '409':
          description: Photo not attached
      security:
      - JWTAccessToken: []
  /user/admin/internal_register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInternalRequestUser'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '400':
          description: Bad request
        '409':
          description: Username already in use
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/preregister:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreregisterResponseUser'
          description: OK
        '403':
          description: Invalid role of current user
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/password/{user_id}:
    post:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequestUser'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad request or weak password
        '403':
          description: Invalid role of current user
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/role/{user_id}:
    put:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleRequestUser'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/type/{user_id}:
    put:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeRequestUser'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/personal/{user_id}:
    patch:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/university/{user_id}:
    patch:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentInfo'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found or is not a university student
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/school/{user_id}:
    patch:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolInfo'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found or is not a school student
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/add_group:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupAddRequestUser'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: Group not found
        '409':
          description: Group already exists
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/remove_group/{group_id}:
    post:
      parameters:
      - description: ID of the group
        in: path
        name: group_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: Group not found
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/add_member/{user_id}:
    post:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipRequestUser'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User or group not found
        '409':
          description: User already in the group
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/remove_member/{user_id}:
    post:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipRequestUser'
        required: true
      responses:
        '200':
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User or group not found
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
  /user/admin/personal/{user_id}/photo:
    put:
      parameters:
      - description: ID of user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      requestBody:
        content:
          image/*:
            schema:
              format: binary
              type: string
        required: true
      responses:
        '204':
          description: OK
        '409':
          description: File is too big
      security:
      - JWTAccessToken: []
      - CSRFAccessToken: []
    get:
      parameters:
      - description: ID of user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            image/*:
              schema:
                format: binary
                type: string
          description: OK
        '404':
          description: User not found
        '409':
          description: Photo not attached
      security:
      - JWTAccessToken: []
  /user/creator/user/{user_id}:
    get:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
  /user/creator/user/all:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponseUser'
          description: OK
        '403':
          description: Invalid role of current user
      security:
      - JWTAccessToken: []
  /user/creator/user_full/all:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFullListResponseUser'
          description: OK
        '403':
          description: Invalid role of current user
      security:
      - JWTAccessToken: []
  /user/creator/user/by-group/{group_id}:
    get:
      parameters:
      - description: ID of the group
        in: path
        name: group_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponseUser'
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: Group not found
      security:
      - JWTAccessToken: []
  /user/creator/personal/{user_id}:
    get:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: Personal info is not set or user not found
      security:
      - JWTAccessToken: []
  /user/creator/university/{user_id}:
    get:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInfo'
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found or is not a university student
      security:
      - JWTAccessToken: []
  /user/creator/school/{user_id}:
    get:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolInfo'
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found or is not a school student
      security:
      - JWTAccessToken: []
  /user/creator/group/{group_id}:
    get:
      parameters:
      - description: Id of the group
        in: path
        name: group_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: Group not found
      security:
      - JWTAccessToken: []
  /user/creator/group/all:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResponseUser'
          description: OK
        '403':
          description: Invalid role of current user
      security:
      - JWTAccessToken: []
  /user/creator/membership/{user_id}:
    get:
      parameters:
      - description: Id of the user
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupListResponseUser'
          description: OK
        '403':
          description: Invalid role of current user
        '404':
          description: User not found
      security:
      - JWTAccessToken: []
servers:
- url: ''
