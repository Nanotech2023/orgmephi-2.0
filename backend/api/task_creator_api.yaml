openapi: 3.0.0
info:
  title: Tasks service API
  description: API description in Markdown.
  version: 1.0.0
servers:
  - url: http://127.0.0.1:5000/contest/tasks/creator
  - url: http://127.0.0.1:5000

paths:
  ######################################################################################################################
  ##                                             Path definition                                                      ##
  ######################################################################################################################

  # Base olympiad

  /base_olympiad/create:
    post:
      summary: Create a new base olympiad (main contest)
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBaseContest'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonBaseContestId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /base_olympiad/{id_base_olympiad}/upload_certificate:
    post:
      summary: Upload certificate for contest
      requestBody:
        content:
          application/octet-stream:
            schema:
              properties:
                certificate_template:
                  type: string
                  format: binary
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_base_olympiad
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /base_olympiad/{id_base_olympiad}/remove:
    post:
      summary: Remove base olympiad (main contest)
      parameters:
        - in: path
          description: Id of the base olympiad
          name: id_base_olympiad
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Base olympiad not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'


  /base_olympiad/{id_base_olympiad}:
    patch:
      summary: Edit base olympiad info
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the base olympiad
          name: id_base_olympiad
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/baseContestInfoUpdate'
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Base olympiad not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'


  # Olympiad

  /base_olympiad/{id_base_olympiad}/olympiad/createsimple:
    post:
      summary: Create a new simple olympiad (main contest)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSimpleContest'
      parameters:
        - in: path
          description: id of the base olympiad
          name: id_base_olympiad
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonContestId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Wrong data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /base_olympiad/{id_base_olympiad}/olympiad/createcomposite:
    post:
      summary: Create a new composite olympiad (main contest)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCompositeContest'
      parameters:
        - in: path
          description: Id of the base olympiad
          name: id_base_olympiad
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonContestId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /base_olympiad/{id_base_olympiad}/olympiad/{id_olympiad}/remove:
    post:
      summary: Remove olympiad (main contest)
      parameters:
        - in: path
          description: Id of the base olympiad
          name: id_base_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /base_olympiad/{id_base_olympiad}/olympiad/{id_olympiad}:
    patch:
      summary: Edit olympiad info
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the base olympiad
          name: id_base_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contestInfoUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  # Stage

  /olympiad/{id_olympiad}/stage/create:
    post:
      summary: Create a new stage in olympiad
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createStage'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stageInfoId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Wrong value
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /olympiad/{id_olympiad}/stage/{id_stage}/remove:
    post:
      summary: Remove stage from olympiad
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the stage
          name: id_stage
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
        '404':
          description: Stage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /olympiad/{id_olympiad}/stage/{id_stage}:
    patch:
      summary: Set stage info for a olympiad
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the stage
          name: id_stage
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stageInfoUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Stage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'


  # Contest
  /olympiad/{id_olympiad}/stage/{id_stage}/contest/{id_contest}/addprevious:
    patch:
      summary: Change previous contest simple contest
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the stage
          name: id_stage
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addPreviousForSimpleContest'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /olympiad/{id_olympiad}/stage/{id_stage}/contest/createsimple:
    post:
      summary: Create a new simple contest
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the stage
          name: id_stage
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createSimpleContest'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonContestId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  # todo: delete ?
  /olympiad/{id_olympiad}/stage/{id_stage}/contest/createcomposite:
    post:
      summary: Create a new composite contest
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the stage
          name: id_stage
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createCompositeContest'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commonContestId'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /olympiad/{id_olympiad}/stage/{id_stage}/contest/{id_contest}/remove:
    post:
      summary: Remove contest
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the stage
          name: id_stage
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /olympiad/{id_olympiad}/stage/{id_stage}/contest/{id_contest}:
    patch:
      summary: Edit contest info
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the stage
          name: id_stage
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/contestInfoUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: Wrong data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /olympiad/{id_olympiad}/stage/{id_stage}/contest/all:
    get:
      summary: list of contests in stage
      parameters:
        - in: path
          description: Id of the olympiad
          name: id_olympiad
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the stage
          name: id_stage
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contestsInStage'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  # Variant

  /contest/{id_contest}/variant/create:
    post:
      summary: Create a new variant
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createVariant'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variantInfoId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/all:
    get:
      summary: list of variants in contest
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variantsInContest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/remove:
    post:
      summary: Remove variant
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{variant_num}:
    get:
      summary: Get info for a different variant
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Number of the variant in contest
          name: variant_num
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/variantInfo'
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
    patch:
      summary: Edit variant
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Number of the variant in contest
          name: variant_num
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/variantInfoUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Variant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  # Tasks

  /contest/{id_contest}/variant/{id_variant}/task/createplain:
    post:
      summary: Create a new plain task
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createPlainTask'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/task/createrange:
    post:
      summary: Create a new range task
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRangeTask'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/task/createmultiple:
    post:
      summary: Create a new multiple task
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMultipleTask'
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskId'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/task/{id_task}/remove:
    post:
      summary: Remove task
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the task
          name: id_task
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/task/{id_task}:
    get:
      summary: Get info for a different tasks
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the task
          name: id_task
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/plainTaskInfo'
                  - $ref: '#/components/schemas/rangeTaskInfo'
                  - $ref: '#/components/schemas/multipleTaskInfo'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/task/{id_task}/plain:
    patch:
      summary: Update plain task info
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the task
          name: id_task
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plainTaskInfoUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/task/{id_task}/range:
    patch:
      summary: Update range task info
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the task
          name: id_task
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rangeTaskInfoUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/task/{id_task}/multiple:
    patch:
      summary: Update multiple task info
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the task
          name: id_task
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/multipleTaskInfoUpdate'
      responses:
        '200':
          description: OK
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/task/all:
    get:
      summary: list of tasks in variant
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tasksInVariant'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '404':
          description: Contest not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'

  /contest/{id_contest}/variant/{id_variant}/tasks/{id_task}/taskimage:
    get:
      summary: Task image
      parameters:
        - in: path
          description: Id of the contest
          name: id_contest
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the variant
          name: id_variant
          required: true
          schema:
            type: integer
        - in: path
          description: Id of the task
          name: id_task
          required: true
          schema:
            type: integer
      security:
        - JWTAcessToken: [ ]
        - CSRFAcessToken: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskInVariantImage'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'



  ######################################################################################################################
  ##                                             Path schemas                                                         ##
  ######################################################################################################################

components:
  securitySchemes:

  ######################################################################################################################
  ##                                             Security components                                                  ##
  ######################################################################################################################

    JWTAcessToken:
      description: Authentication with JWT stored in cookies
      type: apiKey
      in: cookie
      name: access_token_cookie
    JWTRefreshToken:
      description: JWT stored in cookies to refresh an acess token
      type: apiKey
      in: cookie
      name: refresh_token_cookie
    CSRFAcessToken:
      description: CSRF acess token
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
    CSRFRefreshToken:
      description: CSRF refresh token for "remember me" functionality
      type: apiKey
      in: header
      name: X-CSRF-TOKEN
  schemas:

  ######################################################################################################################
  ##                                             Error handling                                                       ##
  ######################################################################################################################

    errorResponse:
      title: 'Error response'
      required:
        - errors
      properties:
        errors:
          type: array
          items:
            type: object
            title: 'Error value'
            required:
              - status
              - title
            properties:
              class:
                type: string
              status:
                type: integer
              title:
                type: string

  ######################################################################################################################
  ##                                             Common data types                                                    ##
  ######################################################################################################################

    typeOlympiadName:
      type: string
      maxLength: 256
    typeOlympiadType:
      type: string
      maxLength: 256
    typeOlympiadLocation:
      type: string
      maxLength: 256
    typeOlympiadText:
      type: string
      maxLength: 1024
    typeDate:
      type: string
      format: date
    typeFile:
      type: string
      format: binary
      nullable: true
    typeVisibility:
      type: boolean
    typeCorrectness:
      type: boolean
    typeMultipleAnswer:
      type: string
      maxLength: 256
    typeIdentifier:
      type: integer
    typePartNum:
      type: integer
      minimum: 0
      maximum: 1000
    typeCondition:
      type: number
      format: float
      minimum: 0.0
      maximum: 100.0
      example:
        5.5
    typeRangeAnswer:
      type: number
      format: float
      maxLength: 128
      example:
        5.5
    typeTargetClass:
      title: 'All target classes types'
      type: string
      enum: [ "5", "6", "7", "8", "9", "10", "11", "student" ]
    typeSubject:
      title: 'All subject types'
      type: string
      enum: [ "Math", "Physics", "Informatics" ]
    typeParticipant:
      title: 'All subject types'
      type: string
      enum: [ "Participant", "Laureate", "Winner" ]
    typeStageCondition:
      title: 'All stage condition types'
      type: string
      enum: [ "No", "And", "Or" ]
      nullable: true
    typeComposite:
      title: 'All contest types'
      type: string
      enum: [ "SimpleContest", "CompositeContest" ]

  ######################################################################################################################
  ##                                             Path schemas                                                         ##
  ######################################################################################################################

    # /base_olympiad/create

    createBaseContest:
      title: Create base contest
      description: Request to base contest creation
      required:
        - name
        - description
        - rules
        - winning_condition
        - laureate_condition
        - olympiad_type_id
        - subject
        - target_classes
      properties:
        name:
          $ref: '#/components/schemas/typeOlympiadName'
        description:
          $ref: '#/components/schemas/typeOlympiadText'
        rules:
          $ref: '#/components/schemas/typeOlympiadText'
        winning_condition:
          $ref: '#/components/schemas/typeCondition'
        laureate_condition:
          $ref: '#/components/schemas/typeCondition'
        olympiad_type_id:
          $ref: '#/components/schemas/typeIdentifier'
        subject:
          $ref: '#/components/schemas/typeSubject'
        target_classes:
          type: array
          items:
            $ref: '#/components/schemas/typeTargetClass'
    commonBaseContestId:
      title: Base contest id
      description: Request to get base contest id as response for creation
      required:
        - base_contest_id
      properties:
        base_contest_id:
          $ref: '#/components/schemas/typeIdentifier'


    # /base_olympiad/{id_base_olympiad}

    baseContestInfoUpdate:
      title: Edit contest base common info
      description: Request to creation base contest
      properties:
        name:
          $ref: '#/components/schemas/typeOlympiadName'
        description:
          $ref: '#/components/schemas/typeOlympiadText'
        rules:
          $ref: '#/components/schemas/typeOlympiadText'
        winning_condition:
          $ref: '#/components/schemas/typeCondition'
        laureate_condition:
          $ref: '#/components/schemas/typeCondition'
        olympiad_type_id:
          $ref: '#/components/schemas/typeIdentifier'
        subject:
          $ref: '#/components/schemas/typeSubject'
        target_classes:
          type: array
          items:
            $ref: '#/components/schemas/typeTargetClass'

    # olympiad/{id_olympiad}/stage/create

    createStage:
      title: Create stage
      description: Request to stage creation
      required:
        - stage_name
        - stage_num
        - this_stage_condition
        - condition
      properties:
        condition:
          $ref: '#/components/schemas/typeCondition'
        stage_name:
          $ref: '#/components/schemas/typeOlympiadName'
        stage_num:
          $ref: '#/components/schemas/typePartNum'
        this_stage_condition:
          $ref: '#/components/schemas/typeOlympiadText'



    stageInfoId:
      title: Stage id
      description: Request to get stage id as response to creation
      required:
        - stage_id
      properties:
        stage_id:
          $ref: '#/components/schemas/typeOlympiadText'




    # /olympiad/{id_olympiad}/stage/{id_stage}

    stageInfoUpdate:
      title: Edit stage common info
      description: Request to edit stage
      properties:
        condition:
          $ref: '#/components/schemas/typeCondition'
        stage_name:
          $ref: '#/components/schemas/typeOlympiadName'
        stage_num:
          $ref: '#/components/schemas/typePartNum'
        this_stage_condition:
          $ref: '#/components/schemas/typeOlympiadText'

    # /olympiad/{id_olympiad}/stage/{id_stage}/contest/{id_contest}/add_previous

    addPreviousForSimpleContest:
      title: Change previous contest for simple contest
      description: Request to change previous contest for simple contest
      required:
        - previous_contest_id
        - previous_participation_condition
      properties:
        previous_contest_id:
          $ref: '#/components/schemas/typeIdentifier'
        previous_participation_condition:
          $ref: '#/components/schemas/typeParticipant'

    # /olympiad/{id_olympiad}/stage/{id_stage}/contest/createsimple

    createSimpleContest:
      title: Create simple contest
      description: Request to simplecontest creation
      required:
        - visibility
        - start_time
        - end_time
        - location
      properties:
        location:
          $ref: '#/components/schemas/typeOlympiadLocation'
        start_time:
          $ref: '#/components/schemas/typeDate'
        end_time:
          $ref: '#/components/schemas/typeDate'
        visibility:
          $ref: '#/components/schemas/typeVisibility'
        previous_contest_id:
          $ref: '#/components/schemas/typeIdentifier'
        previous_participation_condition:
          $ref: '#/components/schemas/typeParticipant'

    # /olympiad/{id_olympiad}/stage/{id_stage}/contest/createcomposite

    createCompositeContest:
      title: Create composite contest
      description: Request to composite contest creation
      required:
        - visibility
      properties:
        visibility:
          $ref: '#/components/schemas/typeVisibility'

    commonContestId:
      title: Contest id
      description: Request to get contest id as response for creation
      required:
        - contest_id
      properties:
        contest_id:
          $ref: '#/components/schemas/typeIdentifier'

    # /olympiad/{id_olympiad}/stage/{id_stage}/contest/{id_contest}

    contestInfoUpdate:
      title: Edit contest common info
      description: Request to creation contest
      properties:
        location:
          $ref: '#/components/schemas/typeOlympiadLocation'
        start_date:
          $ref: '#/components/schemas/typeDate'
        end_date:
          $ref: '#/components/schemas/typeDate'
        visibility:
          $ref: '#/components/schemas/typeVisibility'

    # /olympiad/{id_olympiad}/stage/{id_stage}/contest/all

    contestsInStage:
      title: Get contests in stage
      description: Request to get contests in stage
      properties:
        contests_list:
          type: array
          items:
            type: object
            properties:
              location:
                $ref: '#/components/schemas/typeOlympiadLocation'
              start_time:
                $ref: '#/components/schemas/typeDate'
              end_time:
                $ref: '#/components/schemas/typeDate'
              contest_id:
                $ref: '#/components/schemas/typeIdentifier'
              visibility:
                $ref: '#/components/schemas/typeVisibility'
              composite_type:
                $ref: '#/components/schemas/typeComposite'
              previous_contest_id:
                $ref: '#/components/schemas/typeIdentifier'
              previous_participation_condition:
                $ref: '#/components/schemas/typeParticipant'

    # /contest/{id_contest}/variant/create

    createVariant:
      title: Create variant
      description: Request to variant creation
      required:
        - variant_description
      properties:
        variant_description:
          type: string

    # /contest/{id_contest}/variant/{variant_num}

    variantInfo:
      title: Common variant info
      description: Request to get variant info
      required:
        - variant_id
        - variant_number
        - variant_description
      properties:
        variant_id:
          $ref: '#/components/schemas/typeIdentifier'
        variant_number:
          $ref: '#/components/schemas/typePartNum'
        variant_description:
          $ref: '#/components/schemas/typeOlympiadText'




    variantInfoId:
      title: Common variant id
      description: Request to get variant id as response for creation
      required:
        - variant_id
      properties:
        variant_id:
          $ref: '#/components/schemas/typeIdentifier'




   # /contest/{id_contest}/variant/{variant_num}

    variantInfoUpdate:
      title: Edit variant
      description: Request to edit variant
      properties:
        variant_number:
          $ref: '#/components/schemas/typePartNum'
        variant_description:
          $ref: '#/components/schemas/typeOlympiadText'

    #

    tasksInVariant:
      title: Get contests in stage
      description: Request to get contests in stage
      properties:
        tasks_list:
          type: array
          items:
            type: object
            properties:
              task_id:
                $ref: '#/components/schemas/typeIdentifier'
              num_of_task:
                $ref: '#/components/schemas/typePartNum'
              recommended_answer:
                $ref: '#/components/schemas/typeOlympiadText'
              start_value:
                 $ref: '#/components/schemas/typeRangeAnswer'
              end_value:
                $ref: '#/components/schemas/typeRangeAnswer'
              answers:
                type: array
                items:
                  type: object
                  properties:
                    answer:
                      $ref: '#/components/schemas/typeMultipleAnswer'
                    is_right_answer:
                      $ref: '#/components/schemas/typeCorrectness'

    #

    variantsInContest:
      title: Get variants in contest
      description: Request to get variants in contest
      properties:
        variants_list:
          type: array
          items:
            type: object
            properties:
              variant_id:
                $ref: '#/components/schemas/typeIdentifier'
              variant_number:
                $ref: '#/components/schemas/typePartNum'
              variant_description:
                $ref: '#/components/schemas/typeOlympiadText'

    # /contest/{id_contest}/variant/{id_variant}/task/createmultiple

    taskId:
      title: Get task id
      description: Request to get task id
      required:
        - task_id
      properties:
        task_id:
          type: integer

    # /contest/{id_contest}/variant/{id_variant}/task/createplain

    createPlainTask:
      title: Create task with plain text
      description: Request to creation task with plain text
      required:
        - num_of_task
        - image_of_task
        - recommended_answer
      properties:
        num_of_task:
          $ref: '#/components/schemas/typePartNum'
        image_of_task:
          $ref: '#/components/schemas/typeFile'
        recommended_answer:
          type: string

    # /contest/{id_contest}/variant/{id_variant}/task/createrange

    createRangeTask:
      title: Create task with range
      description: Request to creation task with range
      required:
        - num_of_task
        - image_of_task
        - start_value
        - end_value
      properties:
        num_of_task:
          $ref: '#/components/schemas/typePartNum'
        image_of_task:
          $ref: '#/components/schemas/typeFile'
        start_value:
          $ref: '#/components/schemas/typeRangeAnswer'
        end_value:
          $ref: '#/components/schemas/typeRangeAnswer'

    # /contest/{id_contest}/variant/{id_variant}/task/createmultiple

    createMultipleTask:
      title: Create task with multiple choice
      description: Request to creation task with multiple choice
      required:
        - num_of_task
        - image_of_task
        - answers
      properties:
        num_of_task:
          $ref: '#/components/schemas/typePartNum'
        image_of_task:
          $ref: '#/components/schemas/typeFile'
        answers:
          type: array
          items:
            type: object
            properties:
              task_answer:
                $ref: '#/components/schemas/typeMultipleAnswer'
              is_right_answer:
                $ref: '#/components/schemas/typeCorrectness'

    # /contest/{id_contest}/variant/{id_variant}/task/{id_task}

    plainTaskInfo:
      title: Get info of task with plain text
      description: Request to get info of task with plain text
      required:
        - task_id
        - num_of_task
        - recommended_answer
      properties:
        task_id:
          type: integer
        num_of_task:
          type: integer
        recommended_answer:
          type: string

    # /contest/{id_contest}/variant/{id_variant}/task/{id_task}

    rangeTaskInfo:
      title: Get info of task with range
      description: Request to get info of task with range
      required:
        - task_id
        - num_of_task
        - start_value
        - end_value
      properties:
        task_id:
          $ref: '#/components/schemas/typeIdentifier'
        num_of_task:
          $ref: '#/components/schemas/typePartNum'
        start_value:
          $ref: '#/components/schemas/typeRangeAnswer'
        end_value:
          $ref: '#/components/schemas/typeRangeAnswer'

    # /contest/{id_contest}/variant/{id_variant}/task/{id_task}

    multipleTaskInfo:
      title: Get info of task with multiple choice
      description: Request to get info of task with multiple choice
      required:
        - task_id
        - num_of_task
        - answers
      properties:
        task_id:
          $ref: '#/components/schemas/typeIdentifier'
        num_of_task:
          $ref: '#/components/schemas/typePartNum'
        answers:
          type: array
          items:
            type: object
            properties:
              answer_id:
                $ref: '#/components/schemas/typeIdentifier'
              answer:
                $ref: '#/components/schemas/typeMultipleAnswer'
              correct:
                $ref: '#/components/schemas/typeCorrectness'

    # /contest/{id_contest}/variant/{id_variant}/task/{id_task}/range

    rangeTaskInfoUpdate:
      title: Update task with range
      description: Request to update task with range
      properties:
        num_of_task:
          type: integer
        image_of_task:
          $ref: '#/components/schemas/typeFile'
        start_value:
          $ref: '#/components/schemas/typeRangeAnswer'
        end_value:
          $ref: '#/components/schemas/typeRangeAnswer'

    # /contest/{id_contest}/variant/{id_variant}/task/{id_task}/multiple

    multipleTaskInfoUpdate:
      title: Update task with multiple choice
      description: Request to update task with multiple choice
      properties:
        num_of_task:
          $ref: '#/components/schemas/typePartNum'
        image_of_task:
          $ref: '#/components/schemas/typeFile'
        answers:
          type: array
          items:
            type: object
            properties:
              task_answer:
                $ref: '#/components/schemas/typeMultipleAnswer'
              is_right_answer:
                $ref: '#/components/schemas/typeCorrectness'

    # /contest/{id_contest}/variant/{id_variant}/task/{id_task}/plain

    plainTaskInfoUpdate:
      title: Update task with plain text
      description: Request to update task with plain text
      properties:
        num_of_task:
          $ref: '#/components/schemas/typePartNum'
        image_of_task:
          $ref: '#/components/schemas/typeFile'
        recommended_answer:
          $ref: '#/components/schemas/typeOlympiadText'

    # /contest/{id_contest}/variant/{id_variant}/tasks/{id_task}/taskimage

    taskInVariantImage:
      title: Get image of the task
      description: Request to get task image
      required:
        - task_id
        - image_of_task
      properties:
        task_id:
          $ref: '#/components/schemas/typeIdentifier'
        image_of_task:
          $ref: '#/components/schemas/typeFile'