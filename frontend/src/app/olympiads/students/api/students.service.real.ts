/**
 * Student responses service API
 * API description in Markdown.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core'
import { HttpClient, HttpEvent, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http'
import { CustomHttpUrlEncodingCodec } from '@/shared/encoder'

import { Observable } from 'rxjs'

import { AppealMessage } from '../model/appealMessage'
import { AppealMessageReply } from '../model/appealMessageReply'
import { CommonAppealInfo } from '../model/commonAppealInfo'
import { ContestResultSheet } from '../model/contestResultSheet'
import { CreateAppealInfo } from '../model/createAppealInfo'
import { ResponseStatus } from '../model/responseStatus'
import { UserContestAllAnswer } from '../model/userContestAllAnswer'
import { UserContestAnswer } from '../model/userContestAnswer'
import { UserResponseStatusHistory } from '../model/userResponseStatusHistory'

import { BASE_PATH } from '../variables'
import { Configuration } from '../configuration'
import { StudentsService } from '@/olympiads/students/api/students.service'


@Injectable()
export class StudentsServiceReal implements StudentsService
{
    protected basePath = '/'
    public defaultHeaders = new HttpHeaders()
    public configuration = new Configuration()

    constructor( protected httpClient: HttpClient, @Optional() @Inject( BASE_PATH ) basePath: string, @Optional() configuration: Configuration )
    {
        if ( basePath )
        {
            this.basePath = basePath
        }
        if ( configuration )
        {
            this.configuration = configuration
            this.basePath = basePath || configuration.basePath || this.basePath
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    canConsumeForm( consumes: string[] ): boolean
    {
        const form = 'multipart/form-data'
        for ( const consume of consumes )
        {
            if ( form === consume )
            {
                return true
            }
        }
        return false
    }


    /**
     * Get user&#x27;s answer by id
     *
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param answerId Id of the answer
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdAnswerAnswerIdGet( contestId: number, olympiadId: number, stageId: number, answerId: number, observe?: 'body', reportProgress?: boolean ): Observable<UserContestAnswer>;
    olympiadOlympiadIdStageStageIdContestContestIdAnswerAnswerIdGet( contestId: number, olympiadId: number, stageId: number, answerId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<UserContestAnswer>>;
    olympiadOlympiadIdStageStageIdContestContestIdAnswerAnswerIdGet( contestId: number, olympiadId: number, stageId: number, answerId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<UserContestAnswer>>;
    olympiadOlympiadIdStageStageIdContestContestIdAnswerAnswerIdGet( contestId: number, olympiadId: number, stageId: number, answerId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAnswerAnswerIdGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAnswerAnswerIdGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAnswerAnswerIdGet.' )
        }

        if ( answerId === null || answerId === undefined )
        {
            throw new Error( 'Required parameter answerId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAnswerAnswerIdGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<UserContestAnswer>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/answer/${ encodeURIComponent( String( answerId ) ) }`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get appeal info
     *
     * @param contestId Id of the contest
     * @param appealId Id of the appeal
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdGet( contestId: number, appealId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<CommonAppealInfo>;
    olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdGet( contestId: number, appealId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<CommonAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdGet( contestId: number, appealId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<CommonAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdGet( contestId: number, appealId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdGet.' )
        }

        if ( appealId === null || appealId === undefined )
        {
            throw new Error( 'Required parameter appealId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<CommonAppealInfo>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/appeal/${ encodeURIComponent( String( appealId ) ) }`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Reply appeal for the user&#x27;s response
     *
     * @param body
     * @param contestId Id of the contest
     * @param appealId Id of the appeal
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost( body: AppealMessageReply, contestId: number, appealId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<CommonAppealInfo>;
    olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost( body: AppealMessageReply, contestId: number, appealId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<CommonAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost( body: AppealMessageReply, contestId: number, appealId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<CommonAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost( body: AppealMessageReply, contestId: number, appealId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( body === null || body === undefined )
        {
            throw new Error( 'Required parameter body was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost.' )
        }

        if ( appealId === null || appealId === undefined )
        {
            throw new Error( 'Required parameter appealId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdAppealAppealIdReplyPost.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (CSRFToken) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        {
            headers = headers.set( 'X-CSRF-TOKEN', this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        }

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ]
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType( consumes )
        if ( httpContentTypeSelected != undefined )
        {
            headers = headers.set( 'Content-Type', httpContentTypeSelected )
        }

        return this.httpClient.request<CommonAppealInfo>( 'post', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/appeal/${ encodeURIComponent( String( appealId ) ) }/reply`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get the consolidated sheets within a single competition or stage
     *
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdListGet( contestId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<ContestResultSheet>;
    olympiadOlympiadIdStageStageIdContestContestIdListGet( contestId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<ContestResultSheet>>;
    olympiadOlympiadIdStageStageIdContestContestIdListGet( contestId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<ContestResultSheet>>;
    olympiadOlympiadIdStageStageIdContestContestIdListGet( contestId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdListGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdListGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdListGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<ContestResultSheet>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/list/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get current user answer for the task
     *
     * @param contestId Id of the contest
     * @param taskId Id of the task
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfGet( contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<UserContestAnswer>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfGet( contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<UserContestAnswer>>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfGet( contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<UserContestAnswer>>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfGet( contestId: number, taskId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfGet.' )
        }

        if ( taskId === null || taskId === undefined )
        {
            throw new Error( 'Required parameter taskId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<UserContestAnswer>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/task/${ encodeURIComponent( String( taskId ) ) }/user/self`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Add current user answer for the task
     *
     * @param body
     * @param contestId Id of the contest
     * @param taskId Id of the task
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost( body: UserContestAnswer, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<any>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost( body: UserContestAnswer, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<any>>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost( body: UserContestAnswer, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<any>>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost( body: UserContestAnswer, contestId: number, taskId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( body === null || body === undefined )
        {
            throw new Error( 'Required parameter body was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost.' )
        }

        if ( taskId === null || taskId === undefined )
        {
            throw new Error( 'Required parameter taskId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserSelfPost.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (CSRFToken) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        {
            headers = headers.set( 'X-CSRF-TOKEN', this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        }

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ]
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType( consumes )
        if ( httpContentTypeSelected != undefined )
        {
            headers = headers.set( 'Content-Type', httpContentTypeSelected )
        }

        return this.httpClient.request<any>( 'post', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/task/${ encodeURIComponent( String( taskId ) ) }/user/self`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get user answer for the task
     *
     * @param userId Id of the user
     * @param contestId Id of the contest
     * @param taskId Id of the task
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet( userId: number, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<UserContestAnswer>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet( userId: number, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<UserContestAnswer>>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet( userId: number, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<UserContestAnswer>>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet( userId: number, contestId: number, taskId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( userId === null || userId === undefined )
        {
            throw new Error( 'Required parameter userId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet.' )
        }

        if ( taskId === null || taskId === undefined )
        {
            throw new Error( 'Required parameter taskId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<UserContestAnswer>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/task/${ encodeURIComponent( String( taskId ) ) }/user/${ encodeURIComponent( String( userId ) ) }`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Add user answer for a task
     *
     * @param body
     * @param userId Id of the user
     * @param contestId Id of the contest
     * @param taskId Id of the task
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost( body: UserContestAnswer, userId: number, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<any>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost( body: UserContestAnswer, userId: number, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<any>>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost( body: UserContestAnswer, userId: number, contestId: number, taskId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<any>>;
    olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost( body: UserContestAnswer, userId: number, contestId: number, taskId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( body === null || body === undefined )
        {
            throw new Error( 'Required parameter body was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost.' )
        }

        if ( userId === null || userId === undefined )
        {
            throw new Error( 'Required parameter userId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost.' )
        }

        if ( taskId === null || taskId === undefined )
        {
            throw new Error( 'Required parameter taskId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdTaskTaskIdUserUserIdPost.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (CSRFToken) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        {
            headers = headers.set( 'X-CSRF-TOKEN', this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        }

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ]
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType( consumes )
        if ( httpContentTypeSelected != undefined )
        {
            headers = headers.set( 'Content-Type', httpContentTypeSelected )
        }

        return this.httpClient.request<any>( 'post', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/task/${ encodeURIComponent( String( taskId ) ) }/user/${ encodeURIComponent( String( userId ) ) }`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get appeal info for current user&#x27;s response
     *
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastGet( contestId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<CommonAppealInfo>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastGet( contestId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<CommonAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastGet( contestId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<CommonAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastGet( contestId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<CommonAppealInfo>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/self/appeal/last`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Create appeal for current user&#x27;s response
     *
     * @param body
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastPost( body: AppealMessage, contestId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<CreateAppealInfo>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastPost( body: AppealMessage, contestId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<CreateAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastPost( body: AppealMessage, contestId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<CreateAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastPost( body: AppealMessage, contestId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( body === null || body === undefined )
        {
            throw new Error( 'Required parameter body was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastPost.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastPost.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastPost.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfAppealLastPost.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (CSRFToken) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        {
            headers = headers.set( 'X-CSRF-TOKEN', this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        }

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ]
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType( consumes )
        if ( httpContentTypeSelected != undefined )
        {
            headers = headers.set( 'Content-Type', httpContentTypeSelected )
        }

        return this.httpClient.request<CreateAppealInfo>( 'post', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/self/appeal/last`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get user&#x27;s status and mark for reponse
     *
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusGet( contestId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<ResponseStatus>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusGet( contestId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<ResponseStatus>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusGet( contestId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<ResponseStatus>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusGet( contestId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<ResponseStatus>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/self/status`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get status history of current user&#x27;s work
     *
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusHistoryGet( contestId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<UserResponseStatusHistory>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusHistoryGet( contestId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<UserResponseStatusHistory>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusHistoryGet( contestId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<UserResponseStatusHistory>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusHistoryGet( contestId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusHistoryGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusHistoryGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusHistoryGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<UserResponseStatusHistory>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/self/status/history`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Set user&#x27;s status and mark for reponse
     * Set user&#x27;s status and mark for reponse, only for inspector
     * @param body
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusPost( body: ResponseStatus, contestId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<any>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusPost( body: ResponseStatus, contestId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<any>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusPost( body: ResponseStatus, contestId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<any>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusPost( body: ResponseStatus, contestId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( body === null || body === undefined )
        {
            throw new Error( 'Required parameter body was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusPost.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusPost.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusPost.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserSelfStatusPost.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (CSRFToken) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        {
            headers = headers.set( 'X-CSRF-TOKEN', this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        }

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ]
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType( consumes )
        if ( httpContentTypeSelected != undefined )
        {
            headers = headers.set( 'Content-Type', httpContentTypeSelected )
        }

        return this.httpClient.request<any>( 'post', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/self/status`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get appeal info for user&#x27;s response
     *
     * @param contestId Id of the contest
     * @param userId Id of the user
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<CommonAppealInfo>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<CommonAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<CommonAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastGet.' )
        }

        if ( userId === null || userId === undefined )
        {
            throw new Error( 'Required parameter userId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<CommonAppealInfo>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/${ encodeURIComponent( String( userId ) ) }/appeal/last`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Create appeal for current user&#x27;s response
     *
     * @param body
     * @param contestId Id of the contest
     * @param userId Id of the user
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost( body: AppealMessage, contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<CreateAppealInfo>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost( body: AppealMessage, contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<CreateAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost( body: AppealMessage, contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<CreateAppealInfo>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost( body: AppealMessage, contestId: number, userId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( body === null || body === undefined )
        {
            throw new Error( 'Required parameter body was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost.' )
        }

        if ( userId === null || userId === undefined )
        {
            throw new Error( 'Required parameter userId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdAppealLastPost.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (CSRFToken) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        {
            headers = headers.set( 'X-CSRF-TOKEN', this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        }

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ]
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType( consumes )
        if ( httpContentTypeSelected != undefined )
        {
            headers = headers.set( 'Content-Type', httpContentTypeSelected )
        }

        return this.httpClient.request<CreateAppealInfo>( 'post', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/${ encodeURIComponent( String( userId ) ) }/appeal/last`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get all user answers for the contest
     *
     * @param userId Id of the user
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdResponseGet( userId: number, contestId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<UserContestAllAnswer>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdResponseGet( userId: number, contestId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<UserContestAllAnswer>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdResponseGet( userId: number, contestId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<UserContestAllAnswer>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdResponseGet( userId: number, contestId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( userId === null || userId === undefined )
        {
            throw new Error( 'Required parameter userId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdResponseGet.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdResponseGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdResponseGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdResponseGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<UserContestAllAnswer>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/${ encodeURIComponent( String( userId ) ) }/response`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get user&#x27;s status and mark for reponse
     *
     * @param contestId Id of the contest
     * @param userId Id of the user
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<ResponseStatus>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<ResponseStatus>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<ResponseStatus>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusGet.' )
        }

        if ( userId === null || userId === undefined )
        {
            throw new Error( 'Required parameter userId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<ResponseStatus>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/${ encodeURIComponent( String( userId ) ) }/status`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Get status history of user&#x27;s work
     *
     * @param contestId Id of the contest
     * @param userId Id of the user
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusHistoryGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<UserResponseStatusHistory>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusHistoryGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<UserResponseStatusHistory>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusHistoryGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<UserResponseStatusHistory>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusHistoryGet( contestId: number, userId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusHistoryGet.' )
        }

        if ( userId === null || userId === undefined )
        {
            throw new Error( 'Required parameter userId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusHistoryGet.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusHistoryGet.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusHistoryGet.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = []

        return this.httpClient.request<UserResponseStatusHistory>( 'get', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/${ encodeURIComponent( String( userId ) ) }/status/history`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

    /**
     * Set user&#x27;s status and mark for reponse
     * Set user&#x27;s status and mark for reponse, only for inspector
     * @param body
     * @param userId Id of the user
     * @param contestId Id of the contest
     * @param olympiadId Id of the olympiad
     * @param stageId Id of the stage
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost( body: ResponseStatus, userId: number, contestId: number, olympiadId: number, stageId: number, observe?: 'body', reportProgress?: boolean ): Observable<any>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost( body: ResponseStatus, userId: number, contestId: number, olympiadId: number, stageId: number, observe?: 'response', reportProgress?: boolean ): Observable<HttpResponse<any>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost( body: ResponseStatus, userId: number, contestId: number, olympiadId: number, stageId: number, observe?: 'events', reportProgress?: boolean ): Observable<HttpEvent<any>>;
    olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost( body: ResponseStatus, userId: number, contestId: number, olympiadId: number, stageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any>
    {

        if ( body === null || body === undefined )
        {
            throw new Error( 'Required parameter body was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost.' )
        }

        if ( userId === null || userId === undefined )
        {
            throw new Error( 'Required parameter userId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost.' )
        }

        if ( contestId === null || contestId === undefined )
        {
            throw new Error( 'Required parameter contestId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost.' )
        }

        if ( olympiadId === null || olympiadId === undefined )
        {
            throw new Error( 'Required parameter olympiadId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost.' )
        }

        if ( stageId === null || stageId === undefined )
        {
            throw new Error( 'Required parameter stageId was null or undefined when calling olympiadOlympiadIdStageStageIdContestContestIdUserUserIdStatusPost.' )
        }

        let queryParameters = new HttpParams( { encoder: new CustomHttpUrlEncodingCodec() } )

        let headers = this.defaultHeaders

        // authentication (CSRFToken) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        {
            headers = headers.set( 'X-CSRF-TOKEN', this.configuration.apiKeys[ "X-CSRF-TOKEN" ] )
        }

        // authentication (cookieJWTAuth) required
        if ( this.configuration.apiKeys && this.configuration.apiKeys[ "access_token_cookie" ] )
        {
            queryParameters = queryParameters.set( 'access_token_cookie', this.configuration.apiKeys[ "access_token_cookie" ] )
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ]
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept( httpHeaderAccepts )
        if ( httpHeaderAcceptSelected != undefined )
        {
            headers = headers.set( 'Accept', httpHeaderAcceptSelected )
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ]
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType( consumes )
        if ( httpContentTypeSelected != undefined )
        {
            headers = headers.set( 'Content-Type', httpContentTypeSelected )
        }

        return this.httpClient.request<any>( 'post', `${ this.basePath }/olympiad/${ encodeURIComponent( String( olympiadId ) ) }/stage/${ encodeURIComponent( String( stageId ) ) }/contest/${ encodeURIComponent( String( contestId ) ) }/user/${ encodeURIComponent( String( userId ) ) }/status`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        )
    }

}
